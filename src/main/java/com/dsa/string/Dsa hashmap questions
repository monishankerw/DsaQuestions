Here's the Markdown version of the solutions and explanations for LeetCode-style problems using HashMap, especially focused on frequency counting and majority detection:


---

📘 LeetCode HashMap Frequency Problems & Solutions

✅ Problem: Find Elements Appearing More Than 3 Times

🔹 Description

> Given an integer array nums, return all elements that appear more than 3 times.
Use a HashMap to count frequencies.



🔸 Java Solution

import java.util.*;

public class MoreThanThreeTimes {
    public static List<Integer> findElementsMoreThanThree(int[] nums) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        List<Integer> result = new ArrayList<>();

        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            if (entry.getValue() > 3) {
                result.add(entry.getKey());
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 2, 3, 1, 4, 2, 1, 1, 2, 3};
        List<Integer> result = findElementsMoreThanThree(nums);
        System.out.println("Elements appearing more than 3 times: " + result);
    }
}

🧠 Time & Space Complexity

Time: O(n)

Space: O(n)



---

✅ LeetCode 229: Majority Element II

🔹 Description

> Find all elements in an array that appear more than ⌊ n/3 ⌋ times.



🔸 Java Solution Using HashMap

import java.util.*;

public class MajorityElementII {
    public static List<Integer> majorityElement(int[] nums) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        List<Integer> result = new ArrayList<>();
        int n = nums.length;

        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            if (entry.getValue() > n / 3) {
                result.add(entry.getKey());
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 1, 2, 1, 2, 2};
        List<Integer> result = majorityElement(nums);
        System.out.println("Elements appearing more than n/3 times: " + result);
    }
}


---

🔍 Related LeetCode HashMap Problems

Problem	Description	Link

169. Majority Element	Element that appears more than ⌊ n/2 ⌋ times	Link
229. Majority Element II	Elements that appear more than ⌊ n/3 ⌋ times	Link
347. Top K Frequent Elements	Return k most frequent elements	Link
1207. Unique Number of Occurrences	Return true if frequencies of all elements are unique	Link
383. Ransom Note	Can ransom note be constructed from magazine	Link
451. Sort Characters by Frequency	Sort characters by frequency descending	Link
205. Isomorphic Strings	Determine if two strings are isomorphic	Link



---

Would you like this as a downloadable .md file or extended to include solutions for all those problems too?

